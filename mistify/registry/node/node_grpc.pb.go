// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mistify_Info_FullMethodName              = "/node.Mistify/Info"
	Mistify_Register_FullMethodName          = "/node.Mistify/Register"
	Mistify_UpdateSiblingList_FullMethodName = "/node.Mistify/UpdateSiblingList"
	Mistify_GetFunctionList_FullMethodName   = "/node.Mistify/GetFunctionList"
	Mistify_GetActiveRequests_FullMethodName = "/node.Mistify/GetActiveRequests"
	Mistify_RequestDeployment_FullMethodName = "/node.Mistify/RequestDeployment"
	Mistify_DeployFunction_FullMethodName    = "/node.Mistify/DeployFunction"
	Mistify_RegisterFunction_FullMethodName  = "/node.Mistify/RegisterFunction"
	Mistify_CallFunction_FullMethodName      = "/node.Mistify/CallFunction"
	Mistify_CallFunctionLocal_FullMethodName = "/node.Mistify/CallFunctionLocal"
)

// MistifyClient is the client API for Mistify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MistifyClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAddress, error)
	Register(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*Empty, error)
	UpdateSiblingList(ctx context.Context, in *SiblingList, opts ...grpc.CallOption) (*Empty, error)
	GetFunctionList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionList, error)
	GetActiveRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequestCount, error)
	RequestDeployment(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*Empty, error)
	DeployFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Empty, error)
	RegisterFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Empty, error)
	CallFunction(ctx context.Context, in *FunctionCall, opts ...grpc.CallOption) (*FunctionCallResponse, error)
	CallFunctionLocal(ctx context.Context, in *FunctionCall, opts ...grpc.CallOption) (*FunctionCallResponse, error)
}

type mistifyClient struct {
	cc grpc.ClientConnInterface
}

func NewMistifyClient(cc grpc.ClientConnInterface) MistifyClient {
	return &mistifyClient{cc}
}

func (c *mistifyClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAddress, error) {
	out := new(NodeAddress)
	err := c.cc.Invoke(ctx, Mistify_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) Register(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mistify_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) UpdateSiblingList(ctx context.Context, in *SiblingList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mistify_UpdateSiblingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) GetFunctionList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionList, error) {
	out := new(FunctionList)
	err := c.cc.Invoke(ctx, Mistify_GetFunctionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) GetActiveRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RequestCount, error) {
	out := new(RequestCount)
	err := c.cc.Invoke(ctx, Mistify_GetActiveRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) RequestDeployment(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mistify_RequestDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) DeployFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mistify_DeployFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) RegisterFunction(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mistify_RegisterFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) CallFunction(ctx context.Context, in *FunctionCall, opts ...grpc.CallOption) (*FunctionCallResponse, error) {
	out := new(FunctionCallResponse)
	err := c.cc.Invoke(ctx, Mistify_CallFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mistifyClient) CallFunctionLocal(ctx context.Context, in *FunctionCall, opts ...grpc.CallOption) (*FunctionCallResponse, error) {
	out := new(FunctionCallResponse)
	err := c.cc.Invoke(ctx, Mistify_CallFunctionLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MistifyServer is the server API for Mistify service.
// All implementations must embed UnimplementedMistifyServer
// for forward compatibility
type MistifyServer interface {
	Info(context.Context, *Empty) (*NodeAddress, error)
	Register(context.Context, *NodeAddress) (*Empty, error)
	UpdateSiblingList(context.Context, *SiblingList) (*Empty, error)
	GetFunctionList(context.Context, *Empty) (*FunctionList, error)
	GetActiveRequests(context.Context, *Empty) (*RequestCount, error)
	RequestDeployment(context.Context, *DeploymentRequest) (*Empty, error)
	DeployFunction(context.Context, *Function) (*Empty, error)
	RegisterFunction(context.Context, *Function) (*Empty, error)
	CallFunction(context.Context, *FunctionCall) (*FunctionCallResponse, error)
	CallFunctionLocal(context.Context, *FunctionCall) (*FunctionCallResponse, error)
	mustEmbedUnimplementedMistifyServer()
}

// UnimplementedMistifyServer must be embedded to have forward compatible implementations.
type UnimplementedMistifyServer struct {
}

func (UnimplementedMistifyServer) Info(context.Context, *Empty) (*NodeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMistifyServer) Register(context.Context, *NodeAddress) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMistifyServer) UpdateSiblingList(context.Context, *SiblingList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiblingList not implemented")
}
func (UnimplementedMistifyServer) GetFunctionList(context.Context, *Empty) (*FunctionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionList not implemented")
}
func (UnimplementedMistifyServer) GetActiveRequests(context.Context, *Empty) (*RequestCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveRequests not implemented")
}
func (UnimplementedMistifyServer) RequestDeployment(context.Context, *DeploymentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDeployment not implemented")
}
func (UnimplementedMistifyServer) DeployFunction(context.Context, *Function) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployFunction not implemented")
}
func (UnimplementedMistifyServer) RegisterFunction(context.Context, *Function) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFunction not implemented")
}
func (UnimplementedMistifyServer) CallFunction(context.Context, *FunctionCall) (*FunctionCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunction not implemented")
}
func (UnimplementedMistifyServer) CallFunctionLocal(context.Context, *FunctionCall) (*FunctionCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunctionLocal not implemented")
}
func (UnimplementedMistifyServer) mustEmbedUnimplementedMistifyServer() {}

// UnsafeMistifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MistifyServer will
// result in compilation errors.
type UnsafeMistifyServer interface {
	mustEmbedUnimplementedMistifyServer()
}

func RegisterMistifyServer(s grpc.ServiceRegistrar, srv MistifyServer) {
	s.RegisterService(&Mistify_ServiceDesc, srv)
}

func _Mistify_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).Register(ctx, req.(*NodeAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_UpdateSiblingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiblingList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).UpdateSiblingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_UpdateSiblingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).UpdateSiblingList(ctx, req.(*SiblingList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_GetFunctionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).GetFunctionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_GetFunctionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).GetFunctionList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_GetActiveRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).GetActiveRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_GetActiveRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).GetActiveRequests(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_RequestDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).RequestDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_RequestDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).RequestDeployment(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_DeployFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).DeployFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_DeployFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).DeployFunction(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_RegisterFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).RegisterFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_RegisterFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).RegisterFunction(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_CallFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).CallFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_CallFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).CallFunction(ctx, req.(*FunctionCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mistify_CallFunctionLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MistifyServer).CallFunctionLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mistify_CallFunctionLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MistifyServer).CallFunctionLocal(ctx, req.(*FunctionCall))
	}
	return interceptor(ctx, in, info, handler)
}

// Mistify_ServiceDesc is the grpc.ServiceDesc for Mistify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mistify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Mistify",
	HandlerType: (*MistifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Mistify_Info_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Mistify_Register_Handler,
		},
		{
			MethodName: "UpdateSiblingList",
			Handler:    _Mistify_UpdateSiblingList_Handler,
		},
		{
			MethodName: "GetFunctionList",
			Handler:    _Mistify_GetFunctionList_Handler,
		},
		{
			MethodName: "GetActiveRequests",
			Handler:    _Mistify_GetActiveRequests_Handler,
		},
		{
			MethodName: "RequestDeployment",
			Handler:    _Mistify_RequestDeployment_Handler,
		},
		{
			MethodName: "DeployFunction",
			Handler:    _Mistify_DeployFunction_Handler,
		},
		{
			MethodName: "RegisterFunction",
			Handler:    _Mistify_RegisterFunction_Handler,
		},
		{
			MethodName: "CallFunction",
			Handler:    _Mistify_CallFunction_Handler,
		},
		{
			MethodName: "CallFunctionLocal",
			Handler:    _Mistify_CallFunctionLocal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
