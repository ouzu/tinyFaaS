// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TFRegistry_Info_FullMethodName                = "/node.TFRegistry/Info"
	TFRegistry_Register_FullMethodName            = "/node.TFRegistry/Register"
	TFRegistry_UpdateSiblingList_FullMethodName   = "/node.TFRegistry/UpdateSiblingList"
	TFRegistry_GetFunctionList_FullMethodName     = "/node.TFRegistry/GetFunctionList"
	TFRegistry_RegisterNewFunction_FullMethodName = "/node.TFRegistry/RegisterNewFunction"
)

// TFRegistryClient is the client API for TFRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TFRegistryClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAddress, error)
	Register(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*Empty, error)
	UpdateSiblingList(ctx context.Context, in *SiblingList, opts ...grpc.CallOption) (*Empty, error)
	GetFunctionList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionList, error)
	RegisterNewFunction(ctx context.Context, in *RegisterFunction, opts ...grpc.CallOption) (*Empty, error)
}

type tFRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTFRegistryClient(cc grpc.ClientConnInterface) TFRegistryClient {
	return &tFRegistryClient{cc}
}

func (c *tFRegistryClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAddress, error) {
	out := new(NodeAddress)
	err := c.cc.Invoke(ctx, TFRegistry_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFRegistryClient) Register(ctx context.Context, in *NodeAddress, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TFRegistry_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFRegistryClient) UpdateSiblingList(ctx context.Context, in *SiblingList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TFRegistry_UpdateSiblingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFRegistryClient) GetFunctionList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FunctionList, error) {
	out := new(FunctionList)
	err := c.cc.Invoke(ctx, TFRegistry_GetFunctionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFRegistryClient) RegisterNewFunction(ctx context.Context, in *RegisterFunction, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TFRegistry_RegisterNewFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TFRegistryServer is the server API for TFRegistry service.
// All implementations must embed UnimplementedTFRegistryServer
// for forward compatibility
type TFRegistryServer interface {
	Info(context.Context, *Empty) (*NodeAddress, error)
	Register(context.Context, *NodeAddress) (*Empty, error)
	UpdateSiblingList(context.Context, *SiblingList) (*Empty, error)
	GetFunctionList(context.Context, *Empty) (*FunctionList, error)
	RegisterNewFunction(context.Context, *RegisterFunction) (*Empty, error)
	mustEmbedUnimplementedTFRegistryServer()
}

// UnimplementedTFRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedTFRegistryServer struct {
}

func (UnimplementedTFRegistryServer) Info(context.Context, *Empty) (*NodeAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedTFRegistryServer) Register(context.Context, *NodeAddress) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTFRegistryServer) UpdateSiblingList(context.Context, *SiblingList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiblingList not implemented")
}
func (UnimplementedTFRegistryServer) GetFunctionList(context.Context, *Empty) (*FunctionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionList not implemented")
}
func (UnimplementedTFRegistryServer) RegisterNewFunction(context.Context, *RegisterFunction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewFunction not implemented")
}
func (UnimplementedTFRegistryServer) mustEmbedUnimplementedTFRegistryServer() {}

// UnsafeTFRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TFRegistryServer will
// result in compilation errors.
type UnsafeTFRegistryServer interface {
	mustEmbedUnimplementedTFRegistryServer()
}

func RegisterTFRegistryServer(s grpc.ServiceRegistrar, srv TFRegistryServer) {
	s.RegisterService(&TFRegistry_ServiceDesc, srv)
}

func _TFRegistry_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFRegistryServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFRegistry_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFRegistryServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFRegistry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFRegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFRegistry_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFRegistryServer).Register(ctx, req.(*NodeAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFRegistry_UpdateSiblingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiblingList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFRegistryServer).UpdateSiblingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFRegistry_UpdateSiblingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFRegistryServer).UpdateSiblingList(ctx, req.(*SiblingList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFRegistry_GetFunctionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFRegistryServer).GetFunctionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFRegistry_GetFunctionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFRegistryServer).GetFunctionList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFRegistry_RegisterNewFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFunction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFRegistryServer).RegisterNewFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFRegistry_RegisterNewFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFRegistryServer).RegisterNewFunction(ctx, req.(*RegisterFunction))
	}
	return interceptor(ctx, in, info, handler)
}

// TFRegistry_ServiceDesc is the grpc.ServiceDesc for TFRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TFRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.TFRegistry",
	HandlerType: (*TFRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _TFRegistry_Info_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TFRegistry_Register_Handler,
		},
		{
			MethodName: "UpdateSiblingList",
			Handler:    _TFRegistry_UpdateSiblingList_Handler,
		},
		{
			MethodName: "GetFunctionList",
			Handler:    _TFRegistry_GetFunctionList_Handler,
		},
		{
			MethodName: "RegisterNewFunction",
			Handler:    _TFRegistry_RegisterNewFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
